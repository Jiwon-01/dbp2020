새로 배운 내용
보안 문제
-임의의 SQL문을 주입하고 실행하게 하여  DB가 비정상적으로 동작하게 하는 SQL Injection은 공격이 비교적 쉬운 편이며,
 공격이 성공할 경우 큰 피해를 입힐 수 있다. 
-php 코드에서 mysqli_multi_query()를 사용하면 mysqli_query보다 보안에 취약하다.
-사용자가 입력한 정보는 일단 위험한 정보라고 생각하고 단계별로 검증 과정을 통해서 시스템에 저장하는 것이
 보안 문제에 접근하고 해결하는 가장 기본적인 방식이다.
-mysqli_real_escape_string()을 사용하면 인자로 들어온 데이터 중에서 SQL을 주입하는 공격에 사용될 수 있는 기호를
 문자로 바꿔버린다.

실습 과정에서 문제가 발생하지 않았다.

회고
2주차 강의를 들었는데 처음 배우는 내용들이 많아서 수업을 잘 따라갈 수 있을까 걱정을 많이 했다.
이번 3주차 강의 중에 교수님께서 우리 수업은 PHP만 배우는 수업이 아니기 때문에 PHP 코드에서 잘 모르는 부분이 있어도
너무 그것만 신경을 쓰지 않아도 된다고 하셔서 마음이 좀 편해졌다. 

수업 내용 중 GET 방식과 POST 방식에 대한 이야기가 많이 나와서 추가로 자료를 찾아보았다.
GET은 서버로부터 정보를 조회하기 위해 설계된 메소드이다. 요청을 전송할 때 데이터를 body에 담지 않고, 쿼리스트링을 통해 전송한다.
URL의 끝에 ?와 함께 이름과 값으로 쌍을 이루는 요청 파라미터를 쿼리스트링이라고 부른다.
쿼리스트링을 사용하면 URL에 조회 조건을 표시하기 때문에 특정 페이지를 링크하거나 북마크 할 수 있다.
POST는 리소스를 생성/변경하기 위해 설계되었다. 전송해야 할 데이터를 HTTP 메시지의 body에 담아서 전송한다.
HTTP 메시지의 body는 길이 제한 없이 데이터를 전송할 수 있다. 따라서 POST는 GET과 달리 대용량 데이터를 전송할 수 있다.
POST는 데이터의 내용이 눈에 보이지 않아 GET보다 보안적인 면에서 안전하다고 생각할 수 있지만,
POST 요청도 크롬 개발자 도구, Fiddler와 같은 툴로 요청 내용을 확인할 수 있기 때문에 민감한 데이터의 경우
반드시 암호화하여 전송해야 한다.

동영상 링크: https://youtu.be/uz6khIyXNoU

